image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/auto-water-prod

cache:
  key: auto-water-prod
  paths:
    - ${TF_ROOT}/.terraform
    

before_script:
  - cd ${TF_ROOT}

stages:
  - prepare
  - validate
  - build
  - deploy

init:
  stage: prepare
  script:
    - gitlab-terraform init

terraform-validate:
  stage: validate
  script:
    - gitlab-terraform validate

docker-build:
  stage: build
  image: jonoh/docker-buildx-qemu
  variables:
    DOCKER_HOST: tcp://docker:2375/
  services:
    - name: docker:dind
  before_script:
    - cd ${CI_PROJECT_DIR}/src/poc
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    # Use docker-container driver to allow useful features (push/multi-platform)
    #- docker buildx create --driver docker-container --use
    #- docker buildx inspect --bootstrap
  script:
    # Important: Ensures execution of other binary formats is enabled in the kernel
    - update-binfmts --enable
    - docker buildx create --name rasberrypi-builder
    - docker buildx use rasberrypi-builder
    # - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t "$CI_REGISTRY_IMAGE" .
    - docker buildx build --platform linux/arm/v7 -t "$CI_REGISTRY_IMAGE" .

terraform-plan:
  stage: build
  variables:
    TF_VAR_accessKey: ${AWS_ACCESS_KEY_ID}
    TF_VAR_accessSecret: ${AWS_SECRET_ACCESS_KEY}
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform-apply:
  stage: deploy
  variables:
    TF_VAR_accessKey: ${AWS_ACCESS_KEY_ID}
    TF_VAR_accessSecret: ${AWS_SECRET_ACCESS_KEY}
  environment:
    name: production
  script:
    - gitlab-terraform apply
  dependencies:
    - terraform-plan
  when: manual
  only:
    - master
    
docker-push:
  image: jonoh/docker-buildx-qemu
  stage: deploy
  variables:
    DOCKER_HOST: tcp://docker:2375/
  services:
    - name: docker:dind
  before_script:
    - cd ${CI_PROJECT_DIR}/src/poc
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # Important: Ensures execution of other binary formats is enabled in the kernel
    - update-binfmts --enable
    - docker buildx create --name rasberrypi-builder
    - docker buildx use rasberrypi-builder
    - docker buildx build --platform linux/arm/v7 -t "$CI_REGISTRY_IMAGE" --push .
   # - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

deploy-artifacts:
  image: jpbarto/boto3
  stage: deploy
  only:
    - master
  before_script:
    - cd ${CI_PROJECT_DIR}/src/deployment-scripts
  script:
    - deploy-prod.py
